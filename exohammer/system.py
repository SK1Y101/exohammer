from exohammer.lnprob.initialize_prob import initialize_probfrom exohammer.model.initialize_model import initialize_modelclass system:    def __init__(self, planetary_system, data):        # if lnprob==None:        #     from exohammer.lnprob.initialize_prob import initialize_prob        #     self.lnprob = initialize_prob(system=self)        self.orbital_elements = planetary_system.orbital_elements        self.nplanets_rvs     = planetary_system.nplanets_rvs        self.nplanets_ttvs    = planetary_system.nplanets_ttvs #        self.p0               = planetary_system.p0        self.ndim             = planetary_system.ndim        self.fixed            = planetary_system.fixed        self.theta_min        = planetary_system.theta_min        self.theta_max        = planetary_system.theta_max        self.variable_labels  = planetary_system.variable_labels        self.fixed_labels     = planetary_system.fixed_labels        self.sigma            = planetary_system.sigma        self.mu               = planetary_system.mu        self.index            = planetary_system.index        self.non_gaus         = planetary_system.non_gaus        self.non_gaus_max     = planetary_system.non_gaus_max        self.non_gaus_min     = planetary_system.non_gaus_min        self.theta_ranges     = planetary_system.theta_ranges        self.gaus_flag = planetary_system.gaus_flag        self.flat_flag = planetary_system.flat_flag        self.fixed_flag = planetary_system.fixed_flag                self.mstar      = data.mstar        self.epoch      = data.epoch        self.measured   = data.measured        self.error      = data.error        self.rvbjd      = data.rvbjd        self.rvmnvel    = data.rvmnvel        self.rverrvel   = data.rverrvel        self.tmin = data.tmin        self.tmax = data.tmax    def initial_state(self, nwalkers):        import numpy as np        initial_state=[]        orbital_elements=self.orbital_elements        for i in range(nwalkers):            p0=[]            for j in orbital_elements:                element=orbital_elements[j]                if len(element) == 2:                    minimum=element[0]                    maximum=element[1]                    options=np.linspace(minimum,  maximum, 200)                    p0.append(np.random.choice(options))            initial_state.append(p0)        return initial_state